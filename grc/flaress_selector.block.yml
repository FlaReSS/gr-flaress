# auto-generated by grc.converter

id: flaress_selector
label: selector
category: '[flaress]'

parameters:
-   id: type
    label: IO Type
    dtype: enum
    options: [complex, float, f64, int, s64, short, byte]
    option_labels: [Complex, Float, Float64, Int, Int64, Short, Byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_double, gr.sizeof_int,
            flaress.sizeof_long, gr.sizeof_short, gr.sizeof_char]
    hide: part
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: select
    label: select
    dtype: int
-   id: n_inputs
    label: number of inputs
    dtype: int
    default: '2'
    hide: part
-   id: n_outputs
    label: number of outputs
    dtype: int
    default: '1'
    hide: part

inputs:
-   domain: stream
    dtype: ${ type }
    vlen: ${ vlen }
    multiplicity: ${ n_inputs }
    optional: true

outputs:
-   domain: stream
    dtype: ${ type }
    vlen: ${ vlen }
    multiplicity: ${ n_outputs }
    optional: true
asserts:
- ${ vlen >= 0 }
- ${ n_inputs >= 1 }
- ${ n_outputs >= 1 }
- ${ select >= -1 }
- ${ (n_inputs >= 1 and n_outputs <= 1) or (n_outputs > 1 and n_inputs <= 1) }
- ${ (n_inputs >= n_outputs and select <= n_inputs) or (n_inputs < n_outputs and select
    <= n_outputs) }

templates:
    imports: import flaress
    make: flaress.selector(${type.size}*${vlen}, ${select}, ${n_inputs}, ${n_outputs})
    callbacks:
    - set_select(${select})

file_format: 1
