# auto-generated by grc.converter

id: flaress_snr_estimator_x
label: SNR Estimator
category: '[flaress]'

parameters:
-   id: fft_output
    label: FFT Output
    dtype: enum
    default: 'True'
    options: ['False', 'True']
    option_labels: ['Yes', 'No']
    option_attributes:
        fcn: [cfv, cf]
    hide: part
-   id: carrier
    label: Measurement
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: [Carrier to Noise Ratio, Signal to Noise Ratio]
-   id: auto_carrier
    label: Carrier self-dection
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: all_spectrum
    label: Whole spectrum for noise
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: freq_central
    label: Central Frequency
    dtype: real
    default: '0'
-   id: samp_rate
    label: sample rate
    dtype: real
    default: samp_rate
-   id: nintems
    label: FFT size
    dtype: int
    default: '1024'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: signal_bw
    label: Signal bandwidth
    dtype: int
-   id: noise_bw
    label: Noise bandwidth
    dtype: int
-   id: win
    label: Window Type
    dtype: enum
    default: window.blackmanharris
    options: [window.blackmanharris, window.hamming, window.hann, window.blackman,
        window.rectangular, window.kaiser, window.flattop]
    option_labels: [Blackman-harris, Hamming, Hann, Blackman, Rectangular (Uniform),
        Kaiser, Flat-top]
    hide: part
-   id: average
    label: Average
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    option_labels: ['On', 'Off']
-   id: avg_alpha
    label: Average Alpha
    dtype: real
    default: '1.0'

inputs:
-   domain: stream
    dtype: complex

outputs:
-   domain: stream
    dtype: float
    optional: true
-   label: fft
    domain: stream
    dtype: float
    vlen: ${ nintems }
    optional: true
    hide: ${ fft_output }

templates:
    imports: |-
        from gnuradio.fft import window
        import flaress
    make: "flaress.snr_estimator_${fft_output.fcn}( \n        auto_carrier = ${auto_carrier},\
        \ \n        carrier = ${carrier}, \n        all_spectrum = ${all_spectrum},\
        \ \n        freq_central = ${freq_central}, \n        samp_rate = ${samp_rate},\
        \ \n        nintems = ${nintems}, \n        signal_bw = ${signal_bw}, \n \
        \       noise_bw = ${noise_bw}, \n        avg_alpha = ${avg_alpha}, \n   \
        \     average = ${average}, \n        win = ${win})"

file_format: 1
