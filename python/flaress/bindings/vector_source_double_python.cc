/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(vector_source_double.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(3bc794567954cf1bcb8165050c664205)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <flaress/vector_source_double.h>
// pydoc.h is automatically generated in the build directory
#include <vector_source_double_pydoc.h>

void bind_vector_source_double(py::module& m)
{

    using vector_source_double    = ::gr::flaress::vector_source_double;


    py::class_<vector_source_double, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<vector_source_double>>(m, "vector_source_double", D(vector_source_double))

        .def(py::init(&vector_source_double::make),
           py::arg("data"),
           py::arg("repeat") = false,
           py::arg("vlen") = 1,
           py::arg("tags") = std::vector<tag_t>(),
           D(vector_source_double,make)
        )
        




        
        .def("rewind",&vector_source_double::rewind,       
            D(vector_source_double,rewind)
        )


        
        .def("set_data",&vector_source_double::set_data,       
            py::arg("data"),
            py::arg("tags") = std::vector<tag_t>(),
            D(vector_source_double,set_data)
        )


        
        .def("set_repeat",&vector_source_double::set_repeat,       
            py::arg("repeat"),
            D(vector_source_double,set_repeat)
        )

        ;




}








